///////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
리스트
입력값을 차례대로 저장한다.
삽입과 제거가 일어난 경우 데이터의 순서와 입력 순서가 일치하지 않는다.
삽입과 제거는 자주 일어나므로 리스트는 데이터가 저장된 순서를 유지하지 못한다고 봐도 된다.

array 리스트 : array로 만드는 리스트
				처음 만들때 배열을 x개로 할당하고 시작하기 때문에 x개 이상 추가하기 힘들다.
				데이터 삽입과 제거에 대해서 최대 n번의 항목 이동이 발생하여 느릴 수 있다.
				인덱스를 알 수 있다면 바로 데이터 접근이 가능하다.
					예를들어 8번째로 입력한 공간의 인덱스가 3이면 인덱스 3으로 바로 접근이 가능하다.
				데이터 탐색에 대해서 최대 n번의 접근이 발생

linked 리스트 : malloc등 메모리를 할당해서 만드는 리스트
				매번 메모리를 할당하기 때문에 속도가 느릴 수 있다.
				데이터의 삽입과 제거에 항목이동이 발생하지 않는다.
				인덱스가 없어서 head로부터 접근해야한다.
					예를들어 8번째로 입력한 공간에 값이 있는걸 알아도 8번째 입력한 공간에 바로 접근 할 방법이 없다.
				데이터 탐색에 대해서 최대 n번의 접근이 발생한다.
*/
///////////////////////////////////////////////////////////////////////////////////////////////////////////